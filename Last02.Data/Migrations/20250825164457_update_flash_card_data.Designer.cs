// <auto-generated />
using System;
using Last02.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Last02.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250825164457_update_flash_card_data")]
    partial class update_flash_card_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Last02.Data.Entities.Audio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AudioType")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Audios");
                });

            modelBuilder.Entity("Last02.Data.Entities.Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Last02.Data.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 8, 25, 23, 44, 56, 882, DateTimeKind.Local).AddTicks(9759),
                            Deleted = false,
                            Title = "N5"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 8, 25, 23, 44, 56, 883, DateTimeKind.Local).AddTicks(141),
                            Deleted = false,
                            Title = "N4"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 8, 25, 23, 44, 56, 883, DateTimeKind.Local).AddTicks(143),
                            Deleted = false,
                            Title = "N3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 8, 25, 23, 44, 56, 883, DateTimeKind.Local).AddTicks(144),
                            Deleted = false,
                            Title = "N2"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 8, 25, 23, 44, 56, 883, DateTimeKind.Local).AddTicks(146),
                            Deleted = false,
                            Title = "N1"
                        });
                });

            modelBuilder.Entity("Last02.Data.Entities.Flashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Example")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExampleEn")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExampleVi")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FlashcardCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Front")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Furigana")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeaningEn")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("MeaningVi")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Flashcards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Example = "こんにちは、はじめまして。",
                            ExampleEn = "Hello, nice to meet you.",
                            ExampleVi = "Xin chào, rất vui được gặp bạn.",
                            FlashcardCode = "N5-001-001",
                            Front = "こんにちは",
                            Furigana = "こんにちわ",
                            ImageUrl = "/images/flashcards/konnichiwa.jpg",
                            MeaningEn = "Hello",
                            MeaningVi = "Xin chào",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            Example = "おはよう、きょうもがんばってね。",
                            ExampleEn = "Good morning, do your best today too.",
                            ExampleVi = "Chào buổi sáng, hôm nay cùng cố gắng nhé.",
                            FlashcardCode = "N5-001-002",
                            Front = "おはよう",
                            Furigana = "おはよう",
                            ImageUrl = "/images/flashcards/ohayou.jpg",
                            MeaningEn = "Good morning",
                            MeaningVi = "Chào buổi sáng",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            Example = "こんばんは、いい天気ですね。",
                            ExampleEn = "Good evening, the weather is nice, isn’t it?",
                            ExampleVi = "Chào buổi tối, thời tiết thật đẹp nhỉ.",
                            FlashcardCode = "N5-001-003",
                            Front = "こんばんは",
                            Furigana = "こんばんは",
                            ImageUrl = "/images/flashcards/konbanwa.jpg",
                            MeaningEn = "Good evening",
                            MeaningVi = "Chào buổi tối",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 4,
                            Example = "さようなら、またあした。",
                            ExampleEn = "Goodbye, see you tomorrow.",
                            ExampleVi = "Tạm biệt, hẹn gặp lại ngày mai.",
                            FlashcardCode = "N5-001-004",
                            Front = "さようなら",
                            Furigana = "さようなら",
                            ImageUrl = "/images/flashcards/sayounara.jpg",
                            MeaningEn = "Goodbye",
                            MeaningVi = "Tạm biệt",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 5,
                            Example = "プレゼントをありがとう。",
                            ExampleEn = "Thank you for the present.",
                            ExampleVi = "Cảm ơn vì món quà.",
                            FlashcardCode = "N5-001-005",
                            Front = "ありがとう",
                            Furigana = "ありがとう",
                            ImageUrl = "/images/flashcards/arigatou.jpg",
                            MeaningEn = "Thank you",
                            MeaningVi = "Cảm ơn",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 6,
                            Example = "すみません、もういちどおねがいします。",
                            ExampleEn = "Excuse me, please say it once again.",
                            ExampleVi = "Xin lỗi, vui lòng nhắc lại một lần nữa.",
                            FlashcardCode = "N5-001-006",
                            Front = "すみません",
                            Furigana = "すみません",
                            ImageUrl = "/images/flashcards/sumimasen.jpg",
                            MeaningEn = "Excuse me / Sorry",
                            MeaningVi = "Xin lỗi / Làm phiền",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 7,
                            Example = "はい、わかりました。",
                            ExampleEn = "Yes, I understand.",
                            ExampleVi = "Vâng, tôi đã hiểu.",
                            FlashcardCode = "N5-001-007",
                            Front = "はい",
                            Furigana = "はい",
                            ImageUrl = "/images/flashcards/hai.jpg",
                            MeaningEn = "Yes / Correct",
                            MeaningVi = "Vâng / Đúng",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 8,
                            Example = "いいえ、ちがいます。",
                            ExampleEn = "No, that’s not right.",
                            ExampleVi = "Không, không phải vậy.",
                            FlashcardCode = "N5-001-008",
                            Front = "いいえ",
                            Furigana = "いいえ",
                            ImageUrl = "/images/flashcards/iie.jpg",
                            MeaningEn = "No",
                            MeaningVi = "Không",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 9,
                            Example = "はじめまして、やまだです。",
                            ExampleEn = "Nice to meet you, I am Yamada.",
                            ExampleVi = "Rất vui được gặp bạn, tôi là Yamada.",
                            FlashcardCode = "N5-001-009",
                            Front = "はじめまして",
                            Furigana = "はじめまして",
                            ImageUrl = "/images/flashcards/hajimemashite.jpg",
                            MeaningEn = "Nice to meet you",
                            MeaningVi = "Rất vui được gặp bạn",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 10,
                            Example = "おやすみなさい、またあした。",
                            ExampleEn = "Good night, see you tomorrow.",
                            ExampleVi = "Chúc ngủ ngon, hẹn gặp lại ngày mai.",
                            FlashcardCode = "N5-001-010",
                            Front = "おやすみなさい",
                            Furigana = "おやすみなさい",
                            ImageUrl = "/images/flashcards/oyasuminasai.jpg",
                            MeaningEn = "Good night",
                            MeaningVi = "Chúc ngủ ngon",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 11,
                            Example = "りんごをいちつください。",
                            ExampleEn = "Please give me one apple.",
                            ExampleVi = "Xin cho tôi một quả táo.",
                            FlashcardCode = "N5-002-001",
                            Front = "いち",
                            Furigana = "いち",
                            ImageUrl = "/images/flashcards/ichi.jpg",
                            MeaningEn = "One",
                            MeaningVi = "Số một",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 12,
                            Example = "にほんごをべんきょうしています。",
                            ExampleEn = "I am studying Japanese.",
                            ExampleVi = "Tôi đang học tiếng Nhật.",
                            FlashcardCode = "N5-002-002",
                            Front = "に",
                            Furigana = "に",
                            ImageUrl = "/images/flashcards/ni.jpg",
                            MeaningEn = "Two",
                            MeaningVi = "Số hai",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 13,
                            Example = "さんにんのともだちがいます。",
                            ExampleEn = "I have three friends.",
                            ExampleVi = "Tôi có ba người bạn.",
                            FlashcardCode = "N5-002-003",
                            Front = "さん",
                            Furigana = "さん",
                            ImageUrl = "/images/flashcards/san.jpg",
                            MeaningEn = "Three",
                            MeaningVi = "Số ba",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 14,
                            Example = "よんじにあいましょう。",
                            ExampleEn = "Let’s meet at four o’clock.",
                            ExampleVi = "Hãy gặp nhau lúc bốn giờ.",
                            FlashcardCode = "N5-002-004",
                            Front = "よん / し",
                            Furigana = "よん / し",
                            ImageUrl = "/images/flashcards/yon.jpg",
                            MeaningEn = "Four",
                            MeaningVi = "Số bốn",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 15,
                            Example = "ごじにおきます。",
                            ExampleEn = "I wake up at five o’clock.",
                            ExampleVi = "Tôi thức dậy lúc năm giờ.",
                            FlashcardCode = "N5-002-005",
                            Front = "ご",
                            Furigana = "ご",
                            ImageUrl = "/images/flashcards/go.jpg",
                            MeaningEn = "Five",
                            MeaningVi = "Số năm",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 16,
                            Example = "ろっぷんまってください。",
                            ExampleEn = "Please wait for six minutes.",
                            ExampleVi = "Xin hãy chờ sáu phút.",
                            FlashcardCode = "N5-002-006",
                            Front = "ろく",
                            Furigana = "ろく",
                            ImageUrl = "/images/flashcards/roku.jpg",
                            MeaningEn = "Six",
                            MeaningVi = "Số sáu",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 17,
                            Example = "ななじはんにおきます。",
                            ExampleEn = "I get up at half past seven.",
                            ExampleVi = "Tôi dậy lúc bảy giờ rưỡi.",
                            FlashcardCode = "N5-002-007",
                            Front = "しち / なな",
                            Furigana = "しち / なな",
                            ImageUrl = "/images/flashcards/nana.jpg",
                            MeaningEn = "Seven",
                            MeaningVi = "Số bảy",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 18,
                            Example = "はちじにでかけます。",
                            ExampleEn = "I go out at eight o’clock.",
                            ExampleVi = "Tôi ra ngoài lúc tám giờ.",
                            FlashcardCode = "N5-002-008",
                            Front = "はち",
                            Furigana = "はち",
                            ImageUrl = "/images/flashcards/hachi.jpg",
                            MeaningEn = "Eight",
                            MeaningVi = "Số tám",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 19,
                            Example = "きゅうじまでにきてください。",
                            ExampleEn = "Please come by nine o’clock.",
                            ExampleVi = "Hãy đến trước chín giờ.",
                            FlashcardCode = "N5-002-009",
                            Front = "きゅう / く",
                            Furigana = "きゅう / く",
                            ImageUrl = "/images/flashcards/kyuu.jpg",
                            MeaningEn = "Nine",
                            MeaningVi = "Số chín",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 20,
                            Example = "じゅうにんのせいとがいます。",
                            ExampleEn = "There are ten students.",
                            ExampleVi = "Có mười học sinh.",
                            FlashcardCode = "N5-002-010",
                            Front = "じゅう",
                            Furigana = "じゅう",
                            ImageUrl = "/images/flashcards/juu.jpg",
                            MeaningEn = "Ten",
                            MeaningVi = "Số mười",
                            TopicId = 2
                        },
                        new
                        {
                            Id = 21,
                            Example = "わたしのかぞくはごにんです。",
                            ExampleEn = "My family has five people.",
                            ExampleVi = "Gia đình tôi có năm người.",
                            FlashcardCode = "N5-003-001",
                            Front = "かぞく",
                            Furigana = "かぞく",
                            ImageUrl = "/images/flashcards/kazoku.jpg",
                            MeaningEn = "Family",
                            MeaningVi = "Gia đình",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 22,
                            Example = "ちちはぎんこうではたらいています。",
                            ExampleEn = "My father works at a bank.",
                            ExampleVi = "Cha tôi làm việc ở ngân hàng.",
                            FlashcardCode = "N5-003-002",
                            Front = "ちち",
                            Furigana = "ちち",
                            ImageUrl = "/images/flashcards/chichi.jpg",
                            MeaningEn = "Father (talking about one's own)",
                            MeaningVi = "Cha (nói về cha mình)",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 23,
                            Example = "はははりょうりがじょうずです。",
                            ExampleEn = "My mother is good at cooking.",
                            ExampleVi = "Mẹ tôi nấu ăn rất giỏi.",
                            FlashcardCode = "N5-003-003",
                            Front = "はは",
                            Furigana = "はは",
                            ImageUrl = "/images/flashcards/haha.jpg",
                            MeaningEn = "Mother (talking about one's own)",
                            MeaningVi = "Mẹ (nói về mẹ mình)",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 24,
                            Example = "おとうさんはどこですか。",
                            ExampleEn = "Where is your father?",
                            ExampleVi = "Bố bạn ở đâu?",
                            FlashcardCode = "N5-003-004",
                            Front = "おとうさん",
                            Furigana = "おとうさん",
                            ImageUrl = "/images/flashcards/otousan.jpg",
                            MeaningEn = "Father (polite)",
                            MeaningVi = "Bố (cách gọi lịch sự)",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 25,
                            Example = "おかあさんはげんきですか。",
                            ExampleEn = "How is your mother?",
                            ExampleVi = "Mẹ bạn có khỏe không?",
                            FlashcardCode = "N5-003-005",
                            Front = "おかあさん",
                            Furigana = "おかあさん",
                            ImageUrl = "/images/flashcards/okaasan.jpg",
                            MeaningEn = "Mother (polite)",
                            MeaningVi = "Mẹ (cách gọi lịch sự)",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 26,
                            Example = "あにはだいがくせいです。",
                            ExampleEn = "My older brother is a university student.",
                            ExampleVi = "Anh trai tôi là sinh viên đại học.",
                            FlashcardCode = "N5-003-006",
                            Front = "あに",
                            Furigana = "あに",
                            ImageUrl = "/images/flashcards/ani.jpg",
                            MeaningEn = "Older brother (talking about one's own)",
                            MeaningVi = "Anh trai (nói về anh mình)",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 27,
                            Example = "あねはせんせいです。",
                            ExampleEn = "My older sister is a teacher.",
                            ExampleVi = "Chị gái tôi là giáo viên.",
                            FlashcardCode = "N5-003-007",
                            Front = "あね",
                            Furigana = "あね",
                            ImageUrl = "/images/flashcards/ane.jpg",
                            MeaningEn = "Older sister (talking about one's own)",
                            MeaningVi = "Chị gái (nói về chị mình)",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 28,
                            Example = "おにいさんはなんさいですか。",
                            ExampleEn = "How old is your older brother?",
                            ExampleVi = "Anh trai bạn bao nhiêu tuổi?",
                            FlashcardCode = "N5-003-008",
                            Front = "おにいさん",
                            Furigana = "おにいさん",
                            ImageUrl = "/images/flashcards/oniisan.jpg",
                            MeaningEn = "Older brother (polite)",
                            MeaningVi = "Anh trai (lịch sự)",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 29,
                            Example = "おねえさんはべんきょうしていますか。",
                            ExampleEn = "Is your older sister studying?",
                            ExampleVi = "Chị gái bạn có đang học không?",
                            FlashcardCode = "N5-003-009",
                            Front = "おねえさん",
                            Furigana = "おねえさん",
                            ImageUrl = "/images/flashcards/oneesan.jpg",
                            MeaningEn = "Older sister (polite)",
                            MeaningVi = "Chị gái (lịch sự)",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 30,
                            Example = "きょうだいはなんにんいますか。",
                            ExampleEn = "How many siblings do you have?",
                            ExampleVi = "Bạn có mấy anh chị em?",
                            FlashcardCode = "N5-003-010",
                            Front = "きょうだい",
                            Furigana = "きょうだい",
                            ImageUrl = "/images/flashcards/kyoudai.jpg",
                            MeaningEn = "Siblings",
                            MeaningVi = "Anh chị em",
                            TopicId = 3
                        },
                        new
                        {
                            Id = 31,
                            Example = "がっこうへいきます。",
                            ExampleEn = "I go to school.",
                            ExampleVi = "Tôi đi đến trường.",
                            FlashcardCode = "N5-004-001",
                            Front = "がっこう",
                            Furigana = "がっこう",
                            ImageUrl = "/images/flashcards/gakkou.jpg",
                            MeaningEn = "School",
                            MeaningVi = "Trường học",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 32,
                            Example = "せんせいはにほんじんです。",
                            ExampleEn = "The teacher is Japanese.",
                            ExampleVi = "Giáo viên là người Nhật.",
                            FlashcardCode = "N5-004-002",
                            Front = "せんせい",
                            Furigana = "せんせい",
                            ImageUrl = "/images/flashcards/sensei.jpg",
                            MeaningEn = "Teacher",
                            MeaningVi = "Giáo viên",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 33,
                            Example = "わたしはがくせいです。",
                            ExampleEn = "I am a student.",
                            ExampleVi = "Tôi là sinh viên.",
                            FlashcardCode = "N5-004-003",
                            Front = "がくせい",
                            Furigana = "がくせい",
                            ImageUrl = "/images/flashcards/gakusei.jpg",
                            MeaningEn = "Student",
                            MeaningVi = "Học sinh / Sinh viên",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 34,
                            Example = "きょうしつはにかいにあります。",
                            ExampleEn = "The classroom is on the second floor.",
                            ExampleVi = "Phòng học ở tầng hai.",
                            FlashcardCode = "N5-004-004",
                            Front = "きょうしつ",
                            Furigana = "きょうしつ",
                            ImageUrl = "/images/flashcards/kyoushitsu.jpg",
                            MeaningEn = "Classroom",
                            MeaningVi = "Phòng học",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 35,
                            Example = "ほんをよみます。",
                            ExampleEn = "I read books.",
                            ExampleVi = "Tôi đọc sách.",
                            FlashcardCode = "N5-004-005",
                            Front = "ほん",
                            Furigana = "ほん",
                            ImageUrl = "/images/flashcards/hon.jpg",
                            MeaningEn = "Book",
                            MeaningVi = "Sách",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 36,
                            Example = "えんぴつでかきます。",
                            ExampleEn = "I write with a pencil.",
                            ExampleVi = "Tôi viết bằng bút chì.",
                            FlashcardCode = "N5-004-006",
                            Front = "えんぴつ",
                            Furigana = "えんぴつ",
                            ImageUrl = "/images/flashcards/enpitsu.jpg",
                            MeaningEn = "Pencil",
                            MeaningVi = "Bút chì",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 37,
                            Example = "じしょをつかいます。",
                            ExampleEn = "I use a dictionary.",
                            ExampleVi = "Tôi dùng từ điển.",
                            FlashcardCode = "N5-004-007",
                            Front = "じしょ",
                            Furigana = "じしょ",
                            ImageUrl = "/images/flashcards/jisho.jpg",
                            MeaningEn = "Dictionary",
                            MeaningVi = "Từ điển",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 38,
                            Example = "らいしゅうしけんがあります。",
                            ExampleEn = "There is an exam next week.",
                            ExampleVi = "Tuần sau có kỳ thi.",
                            FlashcardCode = "N5-004-008",
                            Front = "しけん",
                            Furigana = "しけん",
                            ImageUrl = "/images/flashcards/shiken.jpg",
                            MeaningEn = "Exam / Test",
                            MeaningVi = "Kỳ thi",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 39,
                            Example = "まいにちべんきょうします。",
                            ExampleEn = "I study every day.",
                            ExampleVi = "Tôi học mỗi ngày.",
                            FlashcardCode = "N5-004-009",
                            Front = "べんきょう",
                            Furigana = "べんきょう",
                            ImageUrl = "/images/flashcards/benkyou.jpg",
                            MeaningEn = "Study / To study",
                            MeaningVi = "Học tập",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 40,
                            Example = "やすみじかんにともだちとあそびます。",
                            ExampleEn = "I play with friends during break time.",
                            ExampleVi = "Trong giờ nghỉ tôi chơi với bạn.",
                            FlashcardCode = "N5-004-010",
                            Front = "やすみじかん",
                            Furigana = "やすみじかん",
                            ImageUrl = "/images/flashcards/yasumijikan.jpg",
                            MeaningEn = "Break time / Recess",
                            MeaningVi = "Giờ nghỉ",
                            TopicId = 4
                        },
                        new
                        {
                            Id = 41,
                            Example = "みせでくだものをかいます。",
                            ExampleEn = "I buy fruit at the shop.",
                            ExampleVi = "Tôi mua hoa quả ở cửa hàng.",
                            FlashcardCode = "N5-005-001",
                            Front = "みせ",
                            Furigana = "みせ",
                            ImageUrl = "/images/flashcards/mise.jpg",
                            MeaningEn = "Shop / Store",
                            MeaningVi = "Cửa hàng",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 42,
                            Example = "かいものにいきます。",
                            ExampleEn = "I go shopping.",
                            ExampleVi = "Tôi đi mua sắm.",
                            FlashcardCode = "N5-005-002",
                            Front = "かいもの",
                            Furigana = "かいもの",
                            ImageUrl = "/images/flashcards/kaimono.jpg",
                            MeaningEn = "Shopping",
                            MeaningVi = "Mua sắm",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 43,
                            Example = "ほんをかいました。",
                            ExampleEn = "I bought a book.",
                            ExampleVi = "Tôi đã mua một quyển sách.",
                            FlashcardCode = "N5-005-003",
                            Front = "かう",
                            Furigana = "かう",
                            ImageUrl = "/images/flashcards/kau.jpg",
                            MeaningEn = "To buy",
                            MeaningVi = "Mua",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 44,
                            Example = "このみせはやさいをうっています。",
                            ExampleEn = "This shop sells vegetables.",
                            ExampleVi = "Cửa hàng này bán rau.",
                            FlashcardCode = "N5-005-004",
                            Front = "うる",
                            Furigana = "うる",
                            ImageUrl = "/images/flashcards/uru.jpg",
                            MeaningEn = "To sell",
                            MeaningVi = "Bán",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 45,
                            Example = "このシャツはやすいです。",
                            ExampleEn = "This shirt is cheap.",
                            ExampleVi = "Chiếc áo này rẻ.",
                            FlashcardCode = "N5-005-005",
                            Front = "やすい",
                            Furigana = "やすい",
                            ImageUrl = "/images/flashcards/yasui.jpg",
                            MeaningEn = "Cheap / Inexpensive",
                            MeaningVi = "Rẻ",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 46,
                            Example = "このくつはたかいです。",
                            ExampleEn = "These shoes are expensive.",
                            ExampleVi = "Đôi giày này đắt.",
                            FlashcardCode = "N5-005-006",
                            Front = "たかい",
                            Furigana = "たかい",
                            ImageUrl = "/images/flashcards/takai.jpg",
                            MeaningEn = "Expensive / High",
                            MeaningVi = "Đắt / Cao",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 47,
                            Example = "あたらしいかばんをかいました。",
                            ExampleEn = "I bought a new bag.",
                            ExampleVi = "Tôi đã mua một chiếc túi mới.",
                            FlashcardCode = "N5-005-007",
                            Front = "かばん",
                            Furigana = "かばん",
                            ImageUrl = "/images/flashcards/kaban.jpg",
                            MeaningEn = "Bag / Backpack",
                            MeaningVi = "Cặp sách / Túi",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 48,
                            Example = "さいふをなくしました。",
                            ExampleEn = "I lost my wallet.",
                            ExampleVi = "Tôi làm mất ví.",
                            FlashcardCode = "N5-005-008",
                            Front = "さいふ",
                            Furigana = "さいふ",
                            ImageUrl = "/images/flashcards/saifu.jpg",
                            MeaningEn = "Wallet",
                            MeaningVi = "Ví tiền",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 49,
                            Example = "シャツをきます。",
                            ExampleEn = "I wear a shirt.",
                            ExampleVi = "Tôi mặc áo sơ mi.",
                            FlashcardCode = "N5-005-009",
                            Front = "きる",
                            Furigana = "きる",
                            ImageUrl = "/images/flashcards/kiru.jpg",
                            MeaningEn = "To wear/put on (clothes, upper body)",
                            MeaningVi = "Mặc (quần áo)",
                            TopicId = 5
                        },
                        new
                        {
                            Id = 50,
                            Example = "くつをはきます。",
                            ExampleEn = "I put on shoes.",
                            ExampleVi = "Tôi mang giày.",
                            FlashcardCode = "N5-005-010",
                            Front = "はく",
                            Furigana = "はく",
                            ImageUrl = "/images/flashcards/haku.jpg",
                            MeaningEn = "To wear/put on (shoes, pants, skirt)",
                            MeaningVi = "Mang (giày, quần)",
                            TopicId = 5
                        });
                });

            modelBuilder.Entity("Last02.Data.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Last02.Data.Entities.LocalizedMessage", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Code", "LanguageCode");

                    b.ToTable("LocalizedMessages");
                });

            modelBuilder.Entity("Last02.Data.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MemberLastActive")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimesIsLogoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Last02.Data.Entities.MemberCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("Progress")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberCourses");
                });

            modelBuilder.Entity("Last02.Data.Entities.MemberFlashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FlashcardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextReviewAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RememberCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberFlashcards");
                });

            modelBuilder.Entity("Last02.Data.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HexColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TopicCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Học các câu chào hỏi và giao tiếp cơ bản trong tiếng Nhật N5.",
                            HexColorCode = "#FFB74D",
                            IsFree = true,
                            Title = "Chào hỏi cơ bản",
                            TopicCode = "N5-001"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            Description = "Học cách đếm số, nói giờ, ngày tháng trong tiếng Nhật N5.",
                            HexColorCode = "#4DB6AC",
                            IsFree = true,
                            Title = "Số đếm & Thời gian",
                            TopicCode = "N5-002"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            Description = "Từ vựng và mẫu câu liên quan đến gia đình trong tiếng Nhật N5.",
                            HexColorCode = "#64B5F6",
                            IsFree = false,
                            Title = "Gia đình",
                            TopicCode = "N5-003"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 1,
                            Description = "Từ vựng và mẫu câu sử dụng trong môi trường học tập.",
                            HexColorCode = "#BA68C8",
                            IsFree = false,
                            Title = "Trường học",
                            TopicCode = "N5-004"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 1,
                            Description = "Từ vựng và mẫu câu giao tiếp khi đi mua sắm.",
                            HexColorCode = "#E57373",
                            IsFree = false,
                            Title = "Mua sắm",
                            TopicCode = "N5-005"
                        });
                });

            modelBuilder.Entity("Last02.Data.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastForgotPasswordRequestAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Provider")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialProviderToken")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TemporaryPasswordExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemporaryPasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Last02.Data.Entities.Audio", b =>
                {
                    b.HasOne("Last02.Data.Entities.Course", "Course")
                        .WithMany("Audios")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Last02.Data.Entities.Flashcard", b =>
                {
                    b.HasOne("Last02.Data.Entities.Topic", "Topic")
                        .WithMany("Flashcards")
                        .HasForeignKey("TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Last02.Data.Entities.Member", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Last02.Data.Entities.Users", "User")
                        .WithOne("Member")
                        .HasForeignKey("Last02.Data.Entities.Member", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Last02.Data.Entities.MemberCourse", b =>
                {
                    b.HasOne("Last02.Data.Entities.Course", "Course")
                        .WithMany("MemberCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Last02.Data.Entities.Member", "Member")
                        .WithMany("MemberCourses")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Last02.Data.Entities.MemberFlashcard", b =>
                {
                    b.HasOne("Last02.Data.Entities.Flashcard", "Flashcard")
                        .WithMany()
                        .HasForeignKey("FlashcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Last02.Data.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flashcard");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Last02.Data.Entities.Topic", b =>
                {
                    b.HasOne("Last02.Data.Entities.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Last02.Data.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Last02.Data.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Last02.Data.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Last02.Data.Entities.Users", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UsersId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Last02.Data.Entities.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Last02.Data.Entities.Course", b =>
                {
                    b.Navigation("Audios");

                    b.Navigation("MemberCourses");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Last02.Data.Entities.Member", b =>
                {
                    b.Navigation("MemberCourses");
                });

            modelBuilder.Entity("Last02.Data.Entities.Topic", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("Last02.Data.Entities.Users", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
